library (MASS)
library (org.Hs.eg.db)
getwd()
data <- read.csv("binary.csv" )
str(data)
getwd()
data <- read.csv("binary.csv" )
source("D:/rupoli_things/R_studio/neural_network_tutorial/main.R", echo=TRUE)
library(readr)
data1 <- read_csv("C:\Users\luejay\Downloads\GDSC2_fitted_dose_response_24Jul22.xlsx")
data1 <- read_csv("C:/Users/luejay/Downloads/GDSC2_fitted_dose_response_24Jul22.xlsx")
View(data1)
data1 <- read_csv("C:/Users/luejay/Downloads/PANCANCER_ANOVA_Fri Aug 18 00_19_35 2023.csv")
View(data1)
data1 <- read_csv("C:/Users/luejay/Downloads/ANOVA_results_GDSC2_24Jul22.csv")
library(readr)
data1 <- read_csv("C:/Users/luejay/Downloads/ANOVA_results_GDSC2_24Jul22.csv")
library(readr)
data1 <- read_csv("C:/Users/luejay/Downloads/ANOVA_results_GDSC2_24Jul22.csv")
data1 <- read_csv("C:/Users/luejay/Downloads/ANOVA_results_GDSC2_24Jul22.xlsx")
View(data1)
library(readxl)
data1 <- read_excel("C:/Users/luejay/Downloads/ANOVA_results_GDSC2_24Jul22.xlsx")
View(data1)
source("D:/rupoli_things/research/Precily-main/Fig1/Fig1d/Fig1d.R")
Y
source("D:/rupoli_things/research/Precily-main/Fig1/Fig1d/Fig1d.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/scatterplot_predictions.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
View(time_series)
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/R_studio/tutorials/4_graphing.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R")
library(ggplot2)
data <- read.csv("./feature_importance/dnn/2023_10_1_22_18_13.csv")
data <- dplyr::filter(data, permutation != 0)
#y = feature_name b/c I wanted feature score to be vertical, fill = permutation for the score to be the coloring
ggplot(less_data, aes(x = 0, y = feature_name, fill = permutation)) +
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0)#+
library(ggplot2)
data <- read.csv("./feature_importance/dnn/2023_10_1_22_18_13.csv")
data[0:100,]$category <- "A"
View(data)
source("D:/rupoli_things/LUAD_PERSONAL/graph_feature_importance.R")
setwd("D:/rupoli_things/LUAD_PERSONAL")
source("D:/rupoli_things/LUAD_PERSONAL/graph_feature_importance.R")
ggplot(dend, horiz = TRUE, theme = NULL)+
#remove major and minor grids, background color, axis text to be black, color of line to be black
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.text=element_text(color="black"),
axis.line = element_line(colour = "black"))
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_feature_importance.R")
source("D:/rupoli_things/LUAD_PERSONAL/graph_feature_importance.R")
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_13_33_12.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- rbind(dplyr::filter(data, Z_Score >1.3),  dplyr::filter(data, Z_Score < -1.3)  )
data_filtered <- dplyr::arrange(data_filtered,desc(Z_Score))
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_13_33_12.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:30,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_1_22_18_13.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
expression_df <- read.csv("./data/Training_data.csv")
expression_df_filter <- expression_df[, colnames(expression_df) %in% data_filtered$feature_name]
matrix <- cor(expression_df_filter)
clusters <- matrix %>% scale %>% dist %>% hclust
dend <- as.dendrogram(clusters)
ggplot(dend, horiz = TRUE, theme = NULL)+
#remove major and minor grids, background color, axis text to be black, color of line to be black
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.text=element_text(color="black"),
axis.line = element_line(colour = "black"))
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_18_43_22.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
g <- ggscatter(
data, x = "actual", y = "predictions",
#adds a regression line
add ='reg.line',
#adds confidence intervals
conf.int = TRUE,
#adds coorlation coefficient, p value, change letter size
cor.coef = TRUE, cor.method = 'pearson', cor.coef.size = 5,
#adds density of each point as a color
color = "density",
#add coloring
add.params = list(color="gray"),
#adds x and y labels
xlab = "Actual IC50 Value", ylab = 'Predicted IC50 Value', title ="Actual vs ML Predicted Cell Line IC50 Values of 5-Fluorouracil"
)
print(g)
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_18_43_22.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
g <- ggscatter(
data, x = "actual", y = "predictions",
#adds a regression line
add ='reg.line',
#adds confidence intervals
conf.int = TRUE,
#adds coorlation coefficient, p value, change letter size
cor.coef = TRUE, cor.method = 'pearson', cor.coef.size = 5,
#adds density of each point as a color
color = "density",
#add coloring
add.params = list(color="gray"),
#adds x and y labels
xlab = "Actual IC50 Value", ylab = 'Predicted IC50 Value', title ="Actual vs ML Predicted Cell Line IC50 Values of 5-Fluorouracil"
)
print(g)
setwd("D:/rupoli_things/LUAD_PERSONAL")
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_18_43_22.csv",sep=",",header=T,stringsAsFactors = F)
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_18_59_39.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
source("D:/rupoli_things/LUAD_PERSONAL/graph_scatterplot_predictions.R", echo=TRUE)
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_18_59_44.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
View(data)
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_19_17_24.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
g <- ggscatter(
data, x = "actual", y = "predictions",
#adds a regression line
add ='reg.line',
#adds confidence intervals
conf.int = TRUE,
#adds coorlation coefficient, p value, change letter size
cor.coef = TRUE, cor.method = 'pearson', cor.coef.size = 5,
#adds density of each point as a color
color = "density",
#add coloring
add.params = list(color="gray"),
#adds x and y labels
xlab = "Actual IC50 Value", ylab = 'Predicted IC50 Value', title ="Actual vs ML Predicted Cell Line IC50 Values of 5-Fluorouracil"
)
print(g)
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_18_59_44.csv")
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_19_17_25.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
View(data)
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_19_34_05.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
g <- ggscatter(
data, x = "actual", y = "predictions",
#adds a regression line
add ='reg.line',
#adds confidence intervals
conf.int = TRUE,
#adds coorlation coefficient, p value, change letter size
cor.coef = TRUE, cor.method = 'pearson', cor.coef.size = 5,
#adds density of each point as a color
color = "density",
#add coloring
add.params = list(color="gray"),
#adds x and y labels
xlab = "Actual IC50 Value", ylab = 'Predicted IC50 Value', title ="Actual vs ML Predicted Cell Line IC50 Values of 5-Fluorouracil"
)
print(g)
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_19_34_06.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
View(data_filtered)
View(data_filtered)
data_filtered$feature_name <- reorder(data_filtered$feature_name, data_filtered$Z_Score)
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most And Least Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
View(data_filtered)
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
expression_df <- read.csv("./data/Training_data.csv")
expression_df_filter <- expression_df[, colnames(expression_df) %in% data_filtered$feature_name]
matrix <- cor(expression_df_filter)
clusters <- matrix %>% scale %>% dist %>% hclust
dend <- as.dendrogram(clusters)
ggplot(dend, horiz = TRUE, theme = NULL)+
#remove major and minor grids, background color, axis text to be black, color of line to be black
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.text=element_text(color="black"),
axis.line = element_line(colour = "black"))
library(ggplot2)
baseline_predictions <- read.csv("./predictions/linres/2023_10_1_15_37_13.csv")
dnn_predictions <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_19_34_05.csv")
baseline_cor <- cor(baseline_predictions$predictions, baseline_predictions$actual)
dnn_cor <- cor(dnn_predictions$predictions, dnn_predictions$actual)
prediction_types = c(rep("Baseline", nrow(baseline_predictions)) , rep("DNN", nrow(dnn_predictions)))
prediction_df <- data.frame(predictions = c(baseline_predictions$predictions, dnn_predictions$predictions),
actual = dnn_predictions$actual,
types = prediction_types)
ggplot(prediction_df, aes(x = predictions, y=actual)) +
xlim(0,11) + ylim(0,11)+
geom_point(aes(col = types), size = 3)+
geom_abline(slope = 1, intercept= 0, color = "black", linewidth = 1)+
annotate('text', x = 2, y = 10, label = paste("Baseline Pearson Coorlation: ", round(baseline_cor,2)), size = 4.3)+
annotate('text', x = 2.2, y = 9, label = paste("DNN Pearson Coorlation: ", round(dnn_cor,2)), size = 4.3)+
labs(x = "Predicted Values", y = 'Actual Values', title = "Actual VS Predicted IC50 Values of 5-Fluorouracil", subtitle = "From GDSC2 Data")
cor_results = data.frame(models = c("Linear Regression Model", 'Deep Neural Network'),correlations  = c(baseline_cor, dnn_cor))
View(cor_results)
bar_plot <- ggplot(cor_results, aes(x = models, y = correlations, fill = models )) +
geom_bar(stat = 'identity') +
ylab("Correlation (predicted vs observed)") +
ggtitle("Model Performance on IC-50 Values of 5-Fluorouracil Treatment")+
scale_fill_manual(values = c("Linear Regression Model" = "red", 'Deep Neural Network' = "blue"))
print(bar_plot)
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_19_34_06.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
data_filtered$feature_name <- reorder(data_filtered$feature_name, data_filtered$Z_Score)
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
expression_df <- read.csv("./data/Training_data.csv")
library(ggplot2)
library(MASS)
library(ggpubr)
getwd()
#test data, working to implement actual prediction data
data <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_19_34_05.csv",sep=",",header=T,stringsAsFactors = F)
#code from the paper
calc_density <- function(x, y){
#KDE calculation
dens <- kde2d(x, y, n=50)
#which interview from 1 to n each x falls onto
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
#matrix of x and y intervals
ii <- cbind(ix, iy)
#KDE values for each (x,y)
d = dens$z[ii]
return(d)
}
data$density<-calc_density(data$actual, data$pred)
g <- ggscatter(
data, x = "actual", y = "predictions",
#adds a regression line
add ='reg.line',
#adds confidence intervals
conf.int = TRUE,
#adds coorlation coefficient, p value, change letter size
cor.coef = TRUE, cor.method = 'pearson', cor.coef.size = 5,
#adds density of each point as a color
color = "density",
#add coloring
add.params = list(color="gray"),
#adds x and y labels
xlab = "Actual IC50 Value", ylab = 'Predicted IC50 Value', title ="Actual vs ML Predicted Cell Line IC50 Values of 5-Fluorouracil"
)
print(g)
library(ggplot2)
baseline_predictions <- read.csv("./predictions/linres/2023_10_1_15_37_13.csv")
dnn_predictions <- read.csv("./predictions/dnn/gene_predict_IC50_2023_10_17_19_34_05.csv")
baseline_cor <- cor(baseline_predictions$predictions, baseline_predictions$actual)
dnn_cor <- cor(dnn_predictions$predictions, dnn_predictions$actual)
prediction_types = c(rep("Baseline", nrow(baseline_predictions)) , rep("DNN", nrow(dnn_predictions)))
prediction_df <- data.frame(predictions = c(baseline_predictions$predictions, dnn_predictions$predictions),
actual = dnn_predictions$actual,
types = prediction_types)
ggplot(prediction_df, aes(x = predictions, y=actual)) +
xlim(0,11) + ylim(0,11)+
geom_point(aes(col = types), size = 3)+
geom_abline(slope = 1, intercept= 0, color = "black", linewidth = 1)+
annotate('text', x = 2, y = 10, label = paste("Baseline Pearson Coorlation: ", round(baseline_cor,2)), size = 4.3)+
annotate('text', x = 2.2, y = 9, label = paste("DNN Pearson Coorlation: ", round(dnn_cor,2)), size = 4.3)+
labs(x = "Predicted Values", y = 'Actual Values', title = "Actual VS Predicted IC50 Values of 5-Fluorouracil", subtitle = "From GDSC2 Data")
#bar plot
################################################################################################################################
cor_results = data.frame(models = c("Linear Regression Model", 'Deep Neural Network'),correlations  = c(baseline_cor, dnn_cor))
bar_plot <- ggplot(cor_results, aes(x = models, y = correlations, fill = models )) +
geom_bar(stat = 'identity') +
ylab("Correlation (predicted vs observed)") +
ggtitle("Model Performance on IC-50 Values of 5-Fluorouracil Treatment")+
scale_fill_manual(values = c("Linear Regression Model" = "red", 'Deep Neural Network' = "blue"))
print(bar_plot)
library(ggplot2)
library(dplyr)
library(dendextend)
data <- read.csv("./feature_importance/dnn/2023_10_17_19_34_06.csv")
colnames(data)[colnames(data) == "permutation"] <- "Z_Score"
data_filtered <- dplyr::arrange(data,desc(Z_Score))[1:20,]
data_filtered$feature_name <- reorder(data_filtered$feature_name, data_filtered$Z_Score)
ggplot(data_filtered, aes(x = 0, y = feature_name, fill = Z_Score)) +
coord_fixed(ratio = 1)+
geom_tile() +
theme_minimal() +
labs(x = NULL, y = "Genes", title = "DNN Most Important Gene Feature in 5-Fluorouracil Prediction")+
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_fill_gradient2(low = 'blue', mid = 'white',high = 'red', midpoint = 0) #+
View(data)
View(data_filtered)
expression_df <- read.csv("./data/Training_data.csv")
expression_df_filter <- expression_df[, colnames(expression_df) %in% data_filtered$feature_name]
matrix <- cor(expression_df_filter)
clusters <- matrix %>% scale %>% dist %>% hclust
dend <- as.dendrogram(clusters)
ggplot(dend, horiz = TRUE, theme = NULL)+
#remove major and minor grids, background color, axis text to be black, color of line to be black
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.text=element_text(color="black"),
axis.line = element_line(colour = "black"))
View(matrix)
